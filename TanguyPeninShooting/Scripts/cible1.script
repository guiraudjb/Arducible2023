function init(self)
	msg.post(".", "acquire_input_focus")
end

function on_input(self, action_id, action)
	if ActiveKeyboard == true then --TEST 1
		if action_id == hash("hit1") then --TEST 2
			go.set("#sprite", "tint",  vmath.vector4(1, 1, 1, 1)) --RESTAURER LA COULEUR DE LA CIBLE AVANT DE JOUER L'ANIMATION
			if action.released then --TEST 3
				ActiveKeyboard = false
				if ActiveBonusPos == 1 then --TEST 4
					if bonusHitted == 0 then
					bonusHitted=1
					sound.play("HitSound#HitSound3")
					print(ActiveBonusValue)
					if ActiveBonusValue == 1 then
					timeLeft=timeLeft+30
					end
					if ActiveBonusValue == 2 then
					timeLeft=timeLeft+45
					end
					if ActiveBonusValue == 3 then
					timeLeft=timeLeft+60
					end
					if ActiveBonusValue == 4 then
					timeLeft=timeLeft+90
					end
					else
						sound.play("HitSound#HitSound2")
						score=score-1
					end
					
				elseif cibleEnCour==1 then --SINON SI TEST 4
					sound.play("HitSound#HitSound1")
					score=score+1
					bonusHitted=0
					if posInLevel <3 then --TEST 5
						posInLevel = posInLevel + 1
					else				-- SINON TEST5
						posInLevel = 1
						if level < 3 then --TEST 6
						level = level +1
						else				--SINON TEST 6
							finalScore = score+timeLeft
						score=0
						level=0
						msg.post("main:/loader#main", "changeScene", { newScene = "sceneEnding" })
						end -- FIN TEST 6
					end --FIN TEST 5
				else --SINON TEST 4
						sound.play("HitSound#HitSound2")
						score=score-1
				end -- FIN TEST 4
			sprite.play_flipbook("#sprite", "explosion", function()
			sprite.play_flipbook("#sprite", "boule")
			ActiveKeyboard = true
			end) --FERMETURE DE L'APPEL SPRITE PLAY FLIPBOOK
			end -- FIN TEST 3
	end		--FIN TEST 2
	end		--FIN TEST 1
end --FIN FONCTION

function update(self, dt)
	if ActiveKeyboard == true then
		if cibleEnCour==1 then
		go.set("#sprite", "tint",  vmath.vector4(0, 3, 0, 0.3)) --TINTER EN VERT TRANSPARENT LA CIBLE
	else
		go.set("#sprite", "tint",  vmath.vector4(1, 1, 1, 1)) -- TEINTE NORMALE
	end
	end
end

function fixed_update(self, dt)
end

function on_message(self, message_id, message, sender)
end